generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Menu {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  image        String
  price        Float
  category     String
  Status       String
    orderItems OrderItem[] 
  // Relasi ke tabel join yang menghubungkan menu dengan ingredient
  ingredients  MenuIngredient[]
  completedOrderItems CompletedOrderItem[] // Hubungan ke CompletedOrderItem
}

model Ingredient {
  id          Int                     @id @default(autoincrement())
  name        String
  start       Float                   // Stok awal
  stockIn     Float                   // Tambahan stok
  used        Float                   // Bahan yang sudah digunakan
  wasted      Float                   // Bahan yang basi/dibuang
  stock       Float                   // Stok akhir: (start + stockIn) - used - wasted
  stockMin    Float   @default(0)                   // Minimum stock yang diharapkan
  unit        String                  // Satuan, misalnya "gram", "pack", "butir", dll.
  isActive    Boolean                 @default(true) // Untuk soft delete
  menus       MenuIngredient[]
  dailyStocks DailyIngredientStock[]
  // Relasi satu-ke-satu ke Gudang (setiap ingredient memiliki satu record gudang)
  gudang      Gudang?
}

model MenuIngredient {
  id           Int         @id @default(autoincrement())
  menuId       Int
  ingredientId Int
  amount       Float       // Jumlah bahan yang diperlukan untuk menu ini

  menu         Menu        @relation(fields: [menuId], references: [id])
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])

  @@unique([menuId, ingredientId])
}

model DailyIngredientStock {
  id             Int       @id @default(autoincrement())
  date           DateTime  // Tanggal data dicatat
  ingredientId   Int
  ingredientName String    // Nama ingredient
  start          Float     // Stok awal hari itu
  stockIn        Float     // Penambahan stok hari itu
  used           Float     // Bahan yang digunakan hari itu
  wasted         Float     // Bahan yang dibuang hari itu
  stock          Float     // Stok akhir hari itu
  stockMin       Float     // Minimum stock untuk hari tersebut

  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  
  @@index([date])
}

model Gudang {
  id           Int       @id @default(autoincrement())
  ingredientId Int       @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  name         String
  start        Float     // Stok awal di gudang
  stockIn      Float     // Jumlah penerimaan stok baru ke gudang (jika diperlukan)
  used         Float     // Jumlah stok yang sudah diambil (dipakai) dari gudang
  wasted       Float     // Jumlah stok yang rusak atau dibuang di gudang
  stock        Float     // Stok akhir di gudang: (start + stockIn) - used - wasted
  stockMin     Float     // Minimum stock di gudang
  unit         String    // Satuan, disamakan dengan Ingredient
  isActive     Boolean   @default(true)
  // Field back-relation untuk DailyGudangStock
  dailyStocks  DailyGudangStock[]
}

model DailyGudangStock {
  id       Int       @id @default(autoincrement())
  date     DateTime  // Tanggal data dicatat
  gudangId Int
  gudangName String    // Nama ingredient
  start    Float     // Stok awal di gudang pada hari tersebut
  stockIn  Float     // Penambahan stok di gudang pada hari tersebut
  used     Float     // Jumlah stok yang diambil (dipakai) di gudang pada hari tersebut
  wasted   Float     // Jumlah stok yang rusak atau dibuang di gudang pada hari tersebut
  stock    Float     // Stok akhir di gudang pada hari tersebut
  stockMin Float     // Minimum stock di gudang pada hari tersebut

  gudang   Gudang    @relation(fields: [gudangId], references: [id])
  
  @@index([date])
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id            Int             @id @default(autoincrement())
  tableNumber   String
  total         Float
  status        String          @default("pending")
  paymentMethod String?         // Metode pembayaran (tunai, e-wallet, kartu)
  paymentId     String?         // ID pembayaran untuk non-tunai
  customerName  String          // Nama pelanggan
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relasi ke OrderItem
  orderItems    OrderItem[]

  completedOrder CompletedOrder?
}


model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int
  note      String?
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model CompletedOrder {
  id             Int         @id @default(autoincrement())
  tableNumber    String
  total          Float
  paymentMethod  String?
  paymentId      String?
  createdAt      DateTime    @default(now())

  // Relasi ke CompletedOrderItem
  orderItems     CompletedOrderItem[]

  // Relasi balik ke Order
  originalOrder  Order?      @relation(fields: [originalOrderId], references: [id])
  originalOrderId Int?   @unique      // Foreign key untuk Order
}

model CompletedOrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int
  note      String?

  order     CompletedOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu           @relation(fields: [menuId], references: [id], onDelete: Cascade)
}


model DataMeja {
  id         Int  @id @default(autoincrement()) @map("id")
  nomorMeja  Int  @unique @map("nomor_meja")
}

model Reservasi {
  id               Int              @id @default(autoincrement())
  namaCustomer     String
  nomorKontak      String
  jumlahTamu       Int
  tanggalReservasi DateTime
  nomorMeja        String
  durasiPemesanan  Int              @default(60) // Default 60 menit agar tidak error
  kodeBooking      String           @unique
  status           StatusReservasi  @default(BOOKED)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}


enum StatusReservasi {
  BOOKED    // Saat reservasi baru dibuat
  RESERVED  // Meja telah dikonfirmasi
  OCCUPIED  // Meja sudah ditempati
  COMPLETED // Reservasi selesai
  CANCELED  // Reservasi dibatalkan
}