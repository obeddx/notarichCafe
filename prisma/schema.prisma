generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Menu {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  image        String
  price        Float
  hargaBakul   Float           @default(0.0)
  category     String
  Status       String
  maxBeli      Int             @default(100)
  isActive     Boolean         @default(true)
  orderItems   OrderItem[]
  ingredients  MenuIngredient[]
  completedOrderItems CompletedOrderItem[]
  discounts    MenuDiscount[]    // Relasi ke discount bertipe MENU
}

model Ingredient {
  id          Int                     @id @default(autoincrement())
  name        String
  start       Float
  stockIn     Float
  used        Float
  wasted      Float
  stock       Float
  stockMin    Float
  unit        String
  finishedUnit String             @default("-")
  isActive    Boolean             @default(true)
  category    String              @default("main")
  categoryId  Int                 @default(3)
  categories  IngredientCategory  @relation(fields: [categoryId], references: [id])
  batchYield  Float               @default(0)
  type        IngredientType      @default(RAW)
  price       Float               @default(0)
  menus       MenuIngredient[]
  dailyStocks DailyIngredientStock[]
  gudang      Gudang?
  semiCompositions IngredientComposition[] @relation("SemiIngredient")
  rawCompositions  IngredientComposition[] @relation("RawIngredient")
}

model IngredientCategory {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ingredients  Ingredient[]
}

model MenuIngredient {
  id           Int         @id @default(autoincrement())
  menuId       Int
  ingredientId Int
  amount       Float
  menu         Menu        @relation(fields: [menuId], references: [id])
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])
  @@unique([menuId, ingredientId])
}

model DailyIngredientStock {
  id             Int       @id @default(autoincrement())
  date           DateTime
  ingredientId   Int
  ingredientName String
  start          Float
  stockIn        Float
  used           Float
  wasted         Float
  stock          Float
  stockMin       Float
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  @@index([date])
}

model Gudang {
  id           Int       @id @default(autoincrement())
  ingredientId Int       @unique
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  name         String
  start        Float
  stockIn      Float
  used         Float
  wasted       Float
  stock        Float
  stockMin     Float
  unit         String
  isActive     Boolean   @default(true)
  dailyStocks  DailyGudangStock[]
}

model DailyGudangStock {
  id       Int       @id @default(autoincrement())
  date     DateTime
  gudangId Int
  gudangName String
  start    Float
  stockIn  Float
  used     Float
  wasted   Float
  stock    Float
  stockMin Float
  gudang   Gudang    @relation(fields: [gudangId], references: [id])
  @@index([date])
}

enum Role {
  kasir
  manager
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  role       Role     @default(manager)
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id            Int             @id @default(autoincrement())
  tableNumber   String
  total         Float           // Total sebelum discount, tax, dan gratuity
  discountId    Int?            // Foreign key ke Discount (opsional, untuk scope TOTAL)
  discountAmount Float          @default(0.0) // Nilai diskon yang diterapkan
  taxAmount     Float           @default(0.0) // Nilai pajak yang diterapkan
  gratuityAmount Float          @default(0.0) // Nilai gratuity yang diterapkan
  finalTotal    Float           @default(0.0)// Total akhir setelah discount, tax, dan gratuity
  status        String          @default("pending")
  paymentMethod String?
  paymentId     String?
  customerName  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderItems    OrderItem[]
  reservasiId   Int?
  reservasi     Reservasi?      @relation(name: "ReservasiOrder", fields: [reservasiId], references: [id], onDelete: SetNull)
  completedOrder CompletedOrder?
  discount      Discount?       @relation(fields: [discountId], references: [id])
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int
  note      String?
  price     Float           @default(0.0)// Harga per item sebelum discount
  discountAmount Float     @default(0.0) // Diskon per item (jika ada discount MENU)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model CompletedOrder {
  id             Int         @id @default(autoincrement())
  tableNumber    String
  total          Float       // Total sebelum discount, tax, dan gratuity
  discountId     Int?        // Foreign key ke Discount (opsional, untuk scope TOTAL)
  discountAmount Float       @default(0.0)
  taxAmount      Float       @default(0.0)
  gratuityAmount Float       @default(0.0)
  finalTotal     Float       @default(0.0)// Total akhir setelah discount, tax, dan gratuity
  paymentMethod  String?
  paymentId      String?
  createdAt      DateTime    @default(now())
  orderItems     CompletedOrderItem[]
  originalOrder  Order?      @relation(fields: [originalOrderId], references: [id])
  originalOrderId Int?        @unique
  discount       Discount?   @relation(fields: [discountId], references: [id])
}

model CompletedOrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int
  note      String?
  price     Float           @default(0.0)// Harga per item sebelum discount
  discountAmount Float     @default(0.0) // Diskon per item
  order     CompletedOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu           @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model DataMeja {
  id         Int  @id @default(autoincrement()) @map("id")
  nomorMeja  Int  @map("nomor_meja")
}

model Reservasi {
  id               Int              @id @default(autoincrement())
  namaCustomer     String
  nomorKontak      String
  jumlahTamu       Int
  tanggalReservasi DateTime
  nomorMeja        String?
  durasiPemesanan  Int              @default(60)
  kodeBooking      String?          @unique
  status           StatusReservasi  @default(BOOKED)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orders           Order[]          @relation(name: "ReservasiOrder")
}

enum StatusReservasi {
  BOOKED
  RESERVED
  OCCUPIED
  COMPLETED
  CANCELED
}

enum IngredientType {
  RAW
  SEMI_FINISHED
}

model IngredientComposition {
  id                Int         @id @default(autoincrement())
  semiIngredientId  Int
  rawIngredientId   Int
  amount            Float       @default(0)
  semiIngredient    Ingredient  @relation("SemiIngredient", fields: [semiIngredientId], references: [id])
  rawIngredient     Ingredient  @relation("RawIngredient", fields: [rawIngredientId], references: [id])
  @@unique([semiIngredientId, rawIngredientId])
}

enum DiscountType {
  PERCENTAGE
  NORMAL
}

enum DiscountScope {
  MENU
  TOTAL
}

model Discount {
  id        Int           @id @default(autoincrement())
  name      String
  type      DiscountType
  scope     DiscountScope
  value     Float
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  orders    Order[]       // Relasi untuk discount scope TOTAL
  completedOrders CompletedOrder[] // Relasi untuk completed order
  menus     MenuDiscount[] // Relasi untuk discount scope MENU
}

model MenuDiscount {
  id           Int         @id @default(autoincrement())
  menuId       Int
  discountId   Int
  menu         Menu        @relation(fields: [menuId], references: [id])
  discount     Discount    @relation(fields: [discountId], references: [id])
  @@unique([menuId, discountId])
}

model Tax {
  id        Int      @id @default(autoincrement())
  name      String
  value     Float    // Dalam persentase, misal 10 untuk 10%
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gratuity {
  id        Int      @id @default(autoincrement())
  name      String
  value     Float    // Dalam persentase, misal 5 untuk 5%
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}